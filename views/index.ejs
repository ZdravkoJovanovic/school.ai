<!DOCTYPE html>
<html lang="de">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>School AI</title>
  <link href="/styles.css" rel="stylesheet">
  <style>
    /* Chat-Scrollbar verstecken, Scroll bleibt möglich */
    #chat-messages { scrollbar-width: none; -ms-overflow-style: none; }
    #chat-messages::-webkit-scrollbar { display: none; }
    /* Whiteboard: dezentes Grid */
    .wb-grid {
      background-color: #121318;
      background-image:
        linear-gradient(rgba(255,255,255,0.04) 1px, transparent 1px),
        linear-gradient(90deg, rgba(255,255,255,0.04) 1px, transparent 1px);
      background-size: 24px 24px;
      background-position: 0 0, 0 0;
    }
  </style>
</head>
<body class="bg-[#020202] text-neutral-200 h-screen overflow-hidden">
  <%- include('navbar/navbar') %>
  <div class="flex h-[calc(100vh-56px)]">
    <!-- Linke Fläche (70%) → Whiteboard -->
    <section class="w-[70%] p-4 hidden lg:flex">
      <div id="whiteboard-wrapper" class="wb-grid rounded-2xl p-8 w-full flex flex-col gap-3">
        <!-- Toolbar -->
        <div class="flex items-center gap-4">
          <span class="text-sm text-neutral-300">Farbe:</span>
          <button data-color="#ffffff" class="w-5 h-5 rounded-full bg-white ring-1 ring-neutral-600"></button>
          <button data-color="#3b82f6" class="w-5 h-5 rounded-full bg-[#3b82f6] ring-1 ring-neutral-600"></button>
          <button data-color="#ef4444" class="w-5 h-5 rounded-full bg-[#ef4444] ring-1 ring-neutral-600"></button>
          <button data-color="#f59e0b" class="w-5 h-5 rounded-full bg-[#f59e0b] ring-1 ring-neutral-600"></button>
          <div class="h-5 w-px bg-neutral-700 mx-1"></div>
          <button id="tool-draw" class="px-3 py-1 text-xs rounded-md bg-neutral-800 ring-1 ring-neutral-600 text-neutral-200">Zeichnen</button>
          <button id="tool-text" class="px-3 py-1 text-xs rounded-md bg-neutral-800 ring-1 ring-neutral-600 text-neutral-200">Text</button>
          <div class="h-5 w-px bg-neutral-700 mx-1"></div>
          <!-- Fiktiver Ordner/Sheets-Indikator -->
          <button type="button" class="flex items-center gap-2 px-3 py-1 rounded-md bg-neutral-800 ring-1 ring-neutral-600 text-xs text-neutral-200 hover:bg-neutral-700">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.6" class="w-4 h-4">
              <path d="M3 7.5h6l1.8 2H21v7.5A1.5 1.5 0 0119.5 18h-15A1.5 1.5 0 013 16.5V7.5z"/>
            </svg>
            <span>Ablage: /School/Sheets</span>
          </button>
          <!-- Seitenanzeige -->
          <span id="page-indicator" class="text-xs text-white">Seite 1 von 24</span>
          <button id="btn-next-page" type="button" class="ml-1 p-1 rounded-md text-neutral-300 hover:text-white hover:bg-neutral-700/40 focus:outline-none" aria-label="Nächste Seite">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-4 h-4">
              <path d="M10 6l6 6-6 6"/>
              <path d="M6 6v12"/>
            </svg>
          </button>
        </div>
        <div class="relative w-full flex-1">
          <canvas id="whiteboard-canvas" class="w-full h-full rounded-xl"></canvas>
          <!-- Text Overlay Container -->
          <div id="text-layer" class="absolute inset-0 pointer-events-none"></div>
        </div>
      </div>
    </section>

    <!-- Rechte Seite: Chat (30%), gleiche BG, clean -->
    <aside class="w-full lg:w-[30%] bg-[#020202] flex flex-col h-[calc(100vh-56px)] p-4">
      <!-- Mini-Header über dem Input (ca. 10px Abstand zur Navbar) -->
      <div class="flex items-center justify-between mb-2 mt-[10px]">
        <div class="bg-[#121318] border border-[#2a2a2a] rounded-md px-3 py-1 text-sm font-medium text-neutral-100">New Chat</div>
        <div class="flex items-center gap-3 text-neutral-400">
          <!-- Plus -->
          <button type="button" class="hover:text-white focus:outline-none" aria-label="Neu">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.6" class="w-4 h-4">
              <path d="M12 5v14M5 12h14"/>
            </svg>
          </button>
          <!-- History -->
          <button type="button" class="hover:text-white focus:outline-none" aria-label="Verlauf">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.6" class="w-4 h-4">
              <path d="M12 8v5l3 2"/>
              <circle cx="12" cy="12" r="9"/>
            </svg>
          </button>
          <!-- More -->
          <button type="button" class="hover:text-white focus:outline-none" aria-label="Mehr">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-5 h-5">
              <circle cx="5" cy="12" r="1.5"/>
              <circle cx="12" cy="12" r="1.5"/>
              <circle cx="19" cy="12" r="1.5"/>
            </svg>
          </button>
          <!-- Close -->
          <button type="button" class="hover:text-white focus:outline-none" aria-label="Schließen">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.6" class="w-4 h-4">
              <path d="M6 6l12 12M18 6L6 18"/>
            </svg>
          </button>
        </div>
      </div>

      <!-- Eingabe -->
      <form id="chat-form" class="mb-4">
        <div class="relative w-full">
          <textarea id="chat-input" rows="1" placeholder="Nachricht an School AI..." class="w-full rounded-md bg-[#121318] text-neutral-100 placeholder-neutral-500 outline-none focus:ring-2 focus:ring-[#2f3b47] pl-3 pr-40 py-4 text-sm resize-none leading-6 overflow-hidden"></textarea>
          <!-- Icon-Leiste rechts im Feld -->
          <div class="absolute right-2 top-1/2 -translate-y-1/2 flex items-center gap-2">
            <!-- Sketch-Toggle -->
            <button id="btn-sketch-mode" type="button" title="Skizzieren" aria-label="Skizzieren" class="p-2 rounded-md text-neutral-300 hover:text-white hover:bg-neutral-700/40 focus:outline-none">
              <!-- Pencil Icon -->
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.6" class="w-5 h-5">
                <path d="M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25z"/>
                <path d="M14.06 6.19l1.77-1.77a1.5 1.5 0 012.12 0l1.63 1.63a1.5 1.5 0 010 2.12l-1.77 1.77"/>
              </svg>
            </button>
            <!-- Bild-Icon -->
            <button type="button" aria-label="Bild auswählen" class="p-2 rounded-md text-neutral-300 hover:text-white hover:bg-neutral-700/40 focus:outline-none">
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.6" class="w-5 h-5">
                <path d="M4.5 5.5h15a1.5 1.5 0 011.5 1.5v10a1.5 1.5 0 01-1.5 1.5h-15A1.5 1.5 0 013 17V7a1.5 1.5 0 011.5-1.5z"/>
                <path d="M7 14l2.2-2.2a1.5 1.5 0 012.1 0L13.5 14l1.5-1.5a1.5 1.5 0 012.1 0L19.5 15"/>
                <circle cx="8.5" cy="9" r="1.2"/>
              </svg>
            </button>
            <!-- Senden -->
            <button type="submit" aria-label="Senden" class="p-2 rounded-md text-white hover:opacity-90 focus:outline-none">
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-5 h-5">
                <path d="M2.25 12l18-9-4.5 9 4.5 9-18-9z"/>
              </svg>
            </button>
          </div>
        </div>
      </form>

      <!-- Nachrichtenliste darunter -->
      <div id="chat-messages" class="flex-1 overflow-y-auto overflow-x-hidden space-y-4 pr-1">
        <!-- Noch keine Nachrichten: leerer Startzustand -->
      </div>
    </aside>
  </div>

  <script>
    // Whiteboard Setup mit Farben + Text-Tool
    (function() {
      const canvas = document.getElementById('whiteboard-canvas');
      if (!canvas) return;
      const ctx = canvas.getContext('2d');
      const wrapper = document.getElementById('whiteboard-wrapper');
      const textLayer = document.getElementById('text-layer');

      let drawing = false;
      let lastX = 0, lastY = 0;
      let currentColor = '#ef4444'; // rot als default (für manuelles Zeichnen), AI nutzt weiß
      let mode = 'none'; // 'none' | 'draw' | 'text'

      const btnDraw = document.getElementById('tool-draw');
      const btnText = document.getElementById('tool-text');

      function updateToolUI() {
        [btnDraw, btnText].forEach(b => b && b.classList.remove('ring-2','ring-white'));
        if (mode === 'draw' && btnDraw) btnDraw.classList.add('ring-2','ring-white');
        if (mode === 'text' && btnText) btnText.classList.add('ring-2','ring-white');
      }
      function setMode(newMode) {
        mode = (mode === newMode) ? 'none' : newMode;
        updateToolUI();
      }

      function resizeCanvas() {
        const holder = textLayer.parentElement; // relative container
        const rect = holder.getBoundingClientRect();
        const dpr = window.devicePixelRatio || 1;
        canvas.width = Math.floor(rect.width * dpr);
        canvas.height = Math.floor(rect.height * dpr);
        canvas.style.width = rect.width + 'px';
        canvas.style.height = rect.height + 'px';
        ctx.setTransform(dpr, 0, 0, dpr, 0, 0);
        ctx.lineCap = 'round';
        ctx.lineJoin = 'round';
        ctx.lineWidth = 3;
        ctx.strokeStyle = currentColor;
      }

      function computeBounds(strokes){
        let minX=1, minY=1, maxX=0, maxY=0;
        for(const s of strokes){
          if(s.type==='path' && Array.isArray(s.points)){
            for(const [x,y] of s.points){ minX=Math.min(minX,x); minY=Math.min(minY,y); maxX=Math.max(maxX,x); maxY=Math.max(maxY,y); }
          } else if(s.type==='circle' && Array.isArray(s.center)){
            const r=s.radius||0.05; const [cx,cy]=s.center; minX=Math.min(minX,cx-r); minY=Math.min(minY,cy-r); maxX=Math.max(maxX,cx+r); maxY=Math.max(maxY,cy+r);
          } else if(s.type==='text' && Array.isArray(s.position)){
            const [tx,ty]=s.position; minX=Math.min(minX,tx); minY=Math.min(minY,ty); maxX=Math.max(maxX,tx); maxY=Math.max(maxY,ty);
          }
        }
        if(minX>maxX||minY>maxY){ return {minX:0, minY:0, maxX:1, maxY:1}; }
        return {minX, minY, maxX, maxY};
      }

      let transform = {minX:0,minY:0,maxX:1,maxY:1,margin:0.02};
      const noteScale = 0.35; // noch kleiner → ca. doppelt so viel Inhalt wie zuvor
      function nx(x){ const w=transform.maxX-transform.minX||1; return ((x-transform.minX)/w)*(1-2*transform.margin)+transform.margin; }
      function ny(y){ const h=transform.maxY-transform.minY||1; return ((y-transform.minY)/h)*(1-2*transform.margin)+transform.margin; }
      function toXY([nxv, nyv]){ const dpr=window.devicePixelRatio||1; return [nx(nxv)*canvas.width/dpr, ny(nyv)*canvas.height/dpr]; }

      function renderSketch(sketch){
        // Eingehende Daten in Text-Content und optionales Klausurbeispiel aufteilen
        const raw = Array.isArray(sketch?.strokes)
          ? sketch.strokes
          : Array.isArray(sketch?.layers)
            ? sketch.layers.flatMap((l)=> Array.isArray(l.strokes)? l.strokes : [])
            : [];
        const layersArr = Array.isArray(sketch?.layers) ? sketch.layers : [{ name: '', strokes: raw }];
        const isExamLayer = (name)=> /klausur|beispiel/i.test(String(name||''));
        const examStrokes = layersArr
          .filter(l=>isExamLayer(l.name))
          .flatMap(l=> Array.isArray(l.strokes)? l.strokes : [])
          .filter(s=> s && s.type==='text' && s.text);
        const contentStrokes = layersArr
          .filter(l=>!isExamLayer(l.name))
          .flatMap(l=> Array.isArray(l.strokes)? l.strokes : [])
          .filter(s=> s && s.type==='text' && s.text);
        const flat = contentStrokes.sort((a,b)=> (a.position?.[1]??0) - (b.position?.[1]??0) || (a.position?.[0]??0) - (b.position?.[0]??0));
        if (!flat.length && !examStrokes.length) return;
        ctx.save();
        // Canvas leeren, damit alte Inhalte nicht überlagern
        ctx.clearRect(0,0,canvas.width,canvas.height);
        const dpr = window.devicePixelRatio || 1;
        const cw = canvas.width/dpr, ch = canvas.height/dpr;
        const marginX = Math.round(cw*0.02), marginY = Math.round(ch*0.02);
        const gap = Math.round(cw*0.028);
        const columns = 2; // strikt 2 Spalten
        const colWidth = (cw - marginX*2 - gap*(columns-1)) / columns;
        // globale, konstante Schriftgröße pro Seite
        let basePx = Math.round(((flat[0]?.size||0.026) * cw) * noteScale);
        basePx = Math.max(10, Math.min(basePx, 18));
        const lineH = Math.round(basePx*1.16);
        const paraGap = Math.round(basePx*0.36);
        ctx.fillStyle = '#ffffff';
        ctx.font = `600 ${basePx}px 'Segoe Print', 'Comic Sans MS', 'Marker Felt', cursive`;
        ctx.textBaseline = 'top';

        // Klausurbeispiel in zwei Bereiche zerlegen: Aufgabe + Lösung (keine Farben)
        function isQuestion(s){ const t = String(s.text||''); return /^\s*aufgabe\b/i.test(t); }
        function isSolution(s){ const t = String(s.text||''); return /^\s*l(ö|oe)sung\b/i.test(t) || /rechenweg/i.test(t); }
        const examQ = examStrokes.filter(isQuestion);
        const examS = examStrokes.filter(isSolution);
        function wrapSection(strokes){
          const lines = [];
          for(const s of strokes){
            const text = String(s.text||'');
            const paragraphs = text.split(/\n+/);
            for(const p of paragraphs){
              let line='';
              for(const w of p.split(/\s+/)){
                const test = line? line+' '+w : w;
                if (ctx.measureText(test).width > colWidth){ if(line){ lines.push(line); } line = w; } else { line = test; }
              }
              if(line){ lines.push(line); }
              // kleiner Absatzabstand
              lines.push('\u200B');
            }
          }
          while(lines.length && lines[lines.length-1]==='\u200B'){ lines.pop(); }
          return lines;
        }
        const examQWrapped = wrapSection(examQ);
        const examSWrapped = wrapSection(examS);
        const examAllLines = [...examQWrapped, '\u200B', ...examSWrapped];
        const examBlockH = examAllLines.length ? (examAllLines.reduce((acc,ln)=> acc + (ln==='\u200B'? 0.6 : 1), 0)*lineH + paraGap*2) : 0;

        let col = 0;
        let cursorX = marginX;
        let cursorY = marginY;

        function wrapLines(text){
          const out = [];
          const paragraphs = String(text).split(/\n+/);
          for(const p of paragraphs){
            let line='';
            for(const w of p.split(/\s+/)){
              const test = line? line+' '+w : w;
              if (ctx.measureText(test).width > colWidth){ if(line) out.push(line); line = w; } else { line = test; }
            }
            if(line) out.push(line);
            // Absatztrenner als leere Zeile minimiert
            out.push('\u200B');
          }
          // letzte Trenner entfernen
          while(out.length && out[out.length-1]==='\u200B') out.pop();
          return out;
        }

        for (const s of flat){
          const lines = wrapLines(s.text);
          // Höhe des Blocks berechnen (leere Trenner zählen halb)
          let blockLines = 0;
          for(const ln of lines){ blockLines += (ln==='\u200B') ? 0.5 : 1; }
          const blockH = blockLines*lineH + paraGap;
          // Spaltenwechsel falls nötig (kein Schrumpfen mehr)
          const columnBottom = (col === columns-1 && examBlockH>0) ? (ch - marginY - examBlockH - Math.round(paraGap*1.2)) : (ch - marginY);
          if (cursorY + blockH > columnBottom){
            col += 1;
            if (col >= columns){
              // Kein Platz mehr → restliche Inhalte weglassen (nicht überfüllen)
              break;
            }
            cursorX = marginX + col*(colWidth + gap);
            cursorY = marginY;
          }
          // Zeichnen
          let y = cursorY;
          for (const ln of lines){
            if (ln==='\u200B'){ y += Math.round(paraGap*0.6); continue; }
            ctx.fillText(ln, cursorX, y);
            y += lineH;
          }
          cursorY = y + Math.round(paraGap*0.6);
        }

        // Klausurbeispiel unten rechts zeichnen (klar getrennt)
        if (examAllLines.length){
          const xExam = marginX + (columns-1)*(colWidth + gap);
          let yExam = ch - marginY - examBlockH + Math.round(paraGap*0.5);
          for (const ln of examAllLines){
            if (ln==='\u200B'){ yExam += Math.round(paraGap*0.8); continue; }
            ctx.fillStyle = '#ffffff';
            ctx.fillText(ln, xExam, yExam);
            yExam += lineH;
          }
          ctx.fillStyle = '#ffffff';
        }
        ctx.restore();
      }

      function startDraw(x, y) { drawing = true; [lastX, lastY] = [x, y]; }
      function draw(x, y) {
        if (!drawing || mode !== 'draw') return;
        ctx.beginPath();
        ctx.moveTo(lastX, lastY);
        ctx.lineTo(x, y);
        ctx.stroke();
        [lastX, lastY] = [x, y];
      }
      function stopDraw() { drawing = false; }

      // Mouse
      canvas.addEventListener('mousedown', e => { if (mode==='draw') startDraw(e.offsetX, e.offsetY); });
      canvas.addEventListener('mousemove', e => draw(e.offsetX, e.offsetY));
      window.addEventListener('mouseup', stopDraw);
      canvas.addEventListener('mouseleave', stopDraw);

      // Text-Modus: Klick fügt dragbare Textbox hinzu
      canvas.addEventListener('click', e => {
        if (mode !== 'text') return;
        const rect = canvas.getBoundingClientRect();
        const x = e.clientX - rect.left;
        const y = e.clientY - rect.top;
        const node = document.createElement('div');
        node.contentEditable = 'true';
        node.textContent = 'Text';
        node.className = 'pointer-events-auto absolute px-2 py-1 rounded bg-transparent text-sm';
        node.style.left = x + 'px';
        node.style.top = y + 'px';
        node.style.color = currentColor;
        node.style.cursor = 'move';
        textLayer.appendChild(node);
        // Drag
        let dragging = false, sx=0, sy=0, ox=0, oy=0;
        node.addEventListener('mousedown', ev => { const rect2 = canvas.getBoundingClientRect(); dragging = true; sx = ev.clientX; sy = ev.clientY; const r = node.getBoundingClientRect(); ox = r.left - rect2.left; oy = r.top - rect2.top; ev.preventDefault(); });
        window.addEventListener('mousemove', ev => { if(!dragging) return; const rect2 = canvas.getBoundingClientRect(); const nx = ox + (ev.clientX - sx); const ny = oy + (ev.clientY - sy); node.style.left = nx + 'px'; node.style.top = ny + 'px'; });
        window.addEventListener('mouseup', () => dragging = false);
        node.focus();
        setMode('text');
      });

      // Toolbar
      wrapper.querySelectorAll('[data-color]').forEach(btn => {
        btn.addEventListener('click', () => {
          currentColor = btn.getAttribute('data-color');
          ctx.strokeStyle = currentColor;
          wrapper.querySelectorAll('[data-color]').forEach(b=>b.classList.remove('ring-2','ring-white'));
          btn.classList.add('ring-2','ring-white');
        });
      });
      btnDraw?.addEventListener('click', ()=> setMode('draw'));
      btnText?.addEventListener('click', ()=> setMode('text'));

      window.addEventListener('resize', resizeCanvas);
      resizeCanvas();

      // Expose skizzen Renderer global für Chat-Handler
      window.renderAISketch = renderSketch;
    })();

    // Nur UI-Demo: lokale Anzeige gesendeter Nachrichten + Bot-Reply
    (function(){
      const indicator = document.getElementById('page-indicator');
      const nextBtn = document.getElementById('btn-next-page');
      let current = 1, total = 24;
      function renderPage(){ if(indicator) indicator.textContent = `Seite ${current} von ${total}`; }
      nextBtn?.addEventListener('click', ()=>{ current = current >= total ? 1 : current + 1; renderPage(); });
      renderPage();
    })();

    // Chat-Demo
    const form = document.getElementById('chat-form');
    const input = document.getElementById('chat-input');
    const list = document.getElementById('chat-messages');

    function escapeHtml(t){return t.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;');}
    function formatTime(d){return d.toLocaleTimeString([], {hour:'2-digit', minute:'2-digit'});}    

    function addMessage(role, text){
      const isUser = role === 'user';
      const container = document.createElement('div');
      container.className = `flex gap-3 ${isUser ? 'justify-end' : 'justify-start'} px-1`;
      const time = formatTime(new Date());
      const bubble = `
        <div class=\"max-w-[85%]\">\n          <div class=\"text-xs text-neutral-400 mb-1 ${isUser ? 'text-right' : ''}\">${isUser ? 'Du' : 'School AI'}</div>\n          <div class=\"${isUser ? 'bg-[#08090c]' : 'bg-neutral-800/80'} relative rounded-lg p-3 pr-8 pb-2 text-sm leading-relaxed text-neutral-100 break-words whitespace-pre-wrap\">${escapeHtml(text)}\n            <div class=\"absolute bottom-1 right-2 text-[10px] text-neutral-400\">${time}</div>\n          </div>\n        </div>`;
      container.innerHTML = bubble;
      list.appendChild(container);
      list.scrollTop = list.scrollHeight;
    }

    async function typeMessage(role, fullText){
      const isUser = role === 'user';
      const container = document.createElement('div');
      container.className = `flex gap-3 ${isUser ? 'justify-end' : 'justify-start'} px-1`;
      const time = formatTime(new Date());
      container.innerHTML = `
        <div class=\"max-w-[85%]\">\n          <div class=\"text-xs text-neutral-400 mb-1 ${isUser ? 'text-right' : ''}\">${isUser ? 'Du' : 'School AI'}</div>\n          <div class=\"${isUser ? 'bg-[#08090c]' : 'bg-neutral-800/80'} relative rounded-lg p-3 pr-8 pb-2 text-sm leading-relaxed text-neutral-100 break-words whitespace-pre-wrap\"><span class=\"typed\"></span>\n            <div class=\"absolute bottom-1 right-2 text-[10px] text-neutral-400\">${time}</div>\n          </div>\n        </div>`;
      list.appendChild(container);
      const typed = container.querySelector('.typed');
      // schnelle, aber flüssige Tipp-Animation
      const maxDelay = 12; // ms pro Zeichen
      for (let i=0;i<fullText.length;i++){
        typed.textContent += fullText[i];
        if (i % 3 === 0) await new Promise(r=>setTimeout(r, Math.min(maxDelay, 8)));
        list.scrollTop = list.scrollHeight;
      }
    }

    // Konversationsverlauf für Backend
    const history = [];
    let sketchMode = false;
    const sketchBtn = document.getElementById('btn-sketch-mode');
    function updateSketchBtn(){
      if (!sketchBtn) return;
      sketchBtn.classList.toggle('ring-2', sketchMode);
      sketchBtn.classList.toggle('ring-white', sketchMode);
    }
    sketchBtn?.addEventListener('click', ()=>{ sketchMode = !sketchMode; updateSketchBtn(); });

    // Auto-Resize der Textarea & Enter=Send (Shift+Enter für Zeilenumbruch)
    (function(){
      const ta = document.getElementById('chat-input');
      if (!ta) return;
      function autoresize(){ ta.style.height = 'auto'; ta.style.height = Math.min(160, ta.scrollHeight) + 'px'; }
      ta.addEventListener('input', autoresize);
      autoresize();
      ta.addEventListener('keydown', (e)=>{ if(e.key==='Enter' && !e.shiftKey){ e.preventDefault(); form?.requestSubmit(); }});
    })();

    async function fetchWithRetry(url, options, retries=1, delay=800){
      try{
        const res = await fetch(url, options);
        return res;
      }catch(err){
        if (retries <= 0) throw err;
        await new Promise(r=>setTimeout(r, delay));
        return fetchWithRetry(url, options, retries-1, delay*1.5);
      }
    }

    form?.addEventListener('submit', async (e) => {
      e.preventDefault();
      const text = input.value.trim();
      if (!text) return;

      // User Message
      addMessage('user', text);
      history.push({ role: 'user', content: text });
      input.value = '';
      input.focus();

      // Sketch-Entscheidung: expliziter Toggle oder Slash-Command /sketch
      const isSlashSketch = /^\s*\/sketch\b/i.test(text);
      const isSketchIntent = sketchMode || isSlashSketch;
      if (isSketchIntent) {
        // Whiteboard-Skizze holen und rendern; keine lange Chat-Antwort, nur kurze Bestätigung
        const loading = document.createElement('div');
        loading.className = 'flex gap-3 justify-start px-1';
        loading.innerHTML = `
          <div class=\"max-w-[85%]\">\n            <div class=\"text-xs text-neutral-400 mb-1\">School AI</div>\n            <div class=\"bg-neutral-800/80 relative rounded-lg p-3 pr-8 pb-2 text-sm leading-relaxed text-neutral-100\">Skizze wird erstellt…\n              <div class=\"absolute bottom-1 right-2 text-[10px] text-neutral-400\">${formatTime(new Date())}</div>\n            </div>\n          </div>`;
        list.appendChild(loading);
        list.scrollTop = list.scrollHeight;
        try {
          const kres = await fetchWithRetry('/api/sketch', { method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify({ prompt: text }) }, 2, 600);
          loading.remove();
          if (kres.ok) {
            const data = await kres.json();
            if (data?.sketch) {
              window.renderAISketch?.(data.sketch);
              addMessage('assistant', 'Skizze auf dem Whiteboard erstellt.');
              history.push({ role: 'assistant', content: '[Skizze erstellt]' });
              return;
            }
          }
          addMessage('assistant', 'Konnte keine Skizze erstellen.');
          history.push({ role: 'assistant', content: 'Konnte keine Skizze erstellen.' });
          return;
        } catch (err) {
          loading.remove();
          addMessage('assistant', 'Fehler bei der Skizze: ' + (err?.message || 'Unbekannt'));
          history.push({ role: 'assistant', content: 'Fehler bei der Skizze' });
          return;
        }
      }

      // Loading-Bubble (größer + Spinner)
      const loading = document.createElement('div');
      loading.className = 'flex gap-3 justify-start px-1';
      loading.innerHTML = `
        <div class=\"max-w-[85%]\">\n          <div class=\"text-xs text-neutral-400 mb-1\">School AI</div>\n          <div class=\"bg-neutral-800/80 relative rounded-lg p-3 pr-8 pb-2 text-sm leading-relaxed text-neutral-100 min-w-[160px] flex items-center gap-2\">\n            <span class=\"inline-block h-4 w-4 border-2 border-neutral-400 border-t-transparent rounded-full animate-spin\"></span>\n            <span class=\"text-neutral-300\">Denke nach…</span>\n            <div class=\"absolute bottom-1 right-2 text-[10px] text-neutral-400\">${formatTime(new Date())}</div>\n          </div>\n        </div>`;
      list.appendChild(loading);
      list.scrollTop = list.scrollHeight;

      try {
        const resp = await fetch('/api/chat/stream', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ messages: history })
        });
        if (!resp.ok) {
          const err = await resp.json().catch(()=>({error:'Serverfehler'}));
          throw new Error(err.error || 'Serverfehler');
        }
        // Stream lesen und direkt anzeigen
        const reader = resp.body?.getReader();
        const decoder = new TextDecoder();
        loading.remove();
        let full = '';
        if (reader) {
          const isUser = false;
          const container = document.createElement('div');
          container.className = `flex gap-3 ${isUser ? 'justify-end' : 'justify-start'} px-1`;
          const time = formatTime(new Date());
          container.innerHTML = `
            <div class=\"max-w-[85%]\">\n              <div class=\"text-xs text-neutral-400 mb-1\">School AI</div>\n              <div class=\"bg-neutral-800/80 relative rounded-lg p-3 pr-8 pb-2 text-sm leading-relaxed text-neutral-100 break-words whitespace-pre-wrap\"><span class=\"typed\"></span>\n                <div class=\"absolute bottom-1 right-2 text-[10px] text-neutral-400\">${time}</div>\n              </div>\n            </div>`;
          list.appendChild(container);
          const typed = container.querySelector('.typed');

          // Parallel: didaktische Skizze anfordern (ohne Text-Stream zu blockieren)
          (async ()=>{
            try {
              const kres = await fetchWithRetry('/api/sketch', { method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify({ prompt: text }) }, 2, 600);
              if (kres.ok) {
                const data = await kres.json();
                if (data?.sketch) window.renderAISketch?.(data.sketch);
              }
            } catch {}
          })();

          while (true) {
            const { value, done } = await reader.read();
            if (done) break;
            const chunk = decoder.decode(value);
            full += chunk;
            typed.textContent += chunk;
            list.scrollTop = list.scrollHeight;
          }
          history.push({ role: 'assistant', content: full });
        }
      } catch (err) {
        loading.remove();
        addMessage('assistant', 'Fehler: ' + (err?.message || 'Unbekannt'));
      }
    });
  </script>
</body>
</html>
