<!DOCTYPE html>
<html lang="de">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>School AI</title>
  <link href="/styles.css" rel="stylesheet">
  <style>
    /* Chat-Scrollbar verstecken, Scroll bleibt möglich */
    #chat-messages { scrollbar-width: none; -ms-overflow-style: none; }
    #chat-messages::-webkit-scrollbar { display: none; }
  </style>
</head>
<body class="bg-[#020202] text-neutral-200 h-screen overflow-hidden">
  <%- include('navbar/navbar') %>
  <div class="flex h-[calc(100vh-56px)]">
    <!-- Linke Fläche (70%) → Whiteboard -->
    <section class="w-[70%] p-4 hidden lg:flex">
      <div id="whiteboard-wrapper" class="bg-[#121318] rounded-2xl p-12 w-full flex flex-col gap-3">
        <!-- Toolbar -->
        <div class="flex items-center gap-4">
          <span class="text-sm text-neutral-300">Farbe:</span>
          <button data-color="#ffffff" class="w-5 h-5 rounded-full bg-white ring-1 ring-neutral-600"></button>
          <button data-color="#3b82f6" class="w-5 h-5 rounded-full bg-[#3b82f6] ring-1 ring-neutral-600"></button>
          <button data-color="#ef4444" class="w-5 h-5 rounded-full bg-[#ef4444] ring-1 ring-neutral-600"></button>
          <button data-color="#f59e0b" class="w-5 h-5 rounded-full bg-[#f59e0b] ring-1 ring-neutral-600"></button>
          <div class="h-5 w-px bg-neutral-700 mx-1"></div>
          <button id="tool-draw" class="px-3 py-1 text-xs rounded-md bg-neutral-800 ring-1 ring-neutral-600 text-neutral-200">Zeichnen</button>
          <button id="tool-text" class="px-3 py-1 text-xs rounded-md bg-neutral-800 ring-1 ring-neutral-600 text-neutral-200">Text</button>
          <div class="h-5 w-px bg-neutral-700 mx-1"></div>
          <!-- Fiktiver Ordner/Sheets-Indikator -->
          <button type="button" class="flex items-center gap-2 px-3 py-1 rounded-md bg-neutral-800 ring-1 ring-neutral-600 text-xs text-neutral-200 hover:bg-neutral-700">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.6" class="w-4 h-4">
              <path d="M3 7.5h6l1.8 2H21v7.5A1.5 1.5 0 0119.5 18h-15A1.5 1.5 0 013 16.5V7.5z"/>
            </svg>
            <span>Ablage: /School/Sheets</span>
          </button>
          <!-- Seitenanzeige -->
          <span id="page-indicator" class="text-xs text-white">Seite 1 von 24</span>
          <button id="btn-next-page" type="button" class="ml-1 p-1 rounded-md text-neutral-300 hover:text-white hover:bg-neutral-700/40 focus:outline-none" aria-label="Nächste Seite">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-4 h-4">
              <path d="M10 6l6 6-6 6"/>
              <path d="M6 6v12"/>
            </svg>
          </button>
        </div>
        <div class="relative w-full flex-1">
          <canvas id="whiteboard-canvas" class="w-full h-full rounded-xl"></canvas>
          <!-- Text Overlay Container -->
          <div id="text-layer" class="absolute inset-0 pointer-events-none"></div>
        </div>
      </div>
    </section>

    <!-- Rechte Seite: Chat (30%), gleiche BG, clean -->
    <aside class="w-full lg:w-[30%] bg-[#020202] flex flex-col h-[calc(100vh-56px)] p-4">
      <!-- Mini-Header über dem Input (ca. 10px Abstand zur Navbar) -->
      <div class="flex items-center justify-between mb-2 mt-[10px]">
        <div class="bg-[#121318] border border-[#2a2a2a] rounded-md px-3 py-1 text-sm font-medium text-neutral-100">New Chat</div>
        <div class="flex items-center gap-3 text-neutral-400">
          <!-- Plus -->
          <button type="button" class="hover:text-white focus:outline-none" aria-label="Neu">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.6" class="w-4 h-4">
              <path d="M12 5v14M5 12h14"/>
            </svg>
          </button>
          <!-- History -->
          <button type="button" class="hover:text-white focus:outline-none" aria-label="Verlauf">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.6" class="w-4 h-4">
              <path d="M12 8v5l3 2"/>
              <circle cx="12" cy="12" r="9"/>
            </svg>
          </button>
          <!-- More -->
          <button type="button" class="hover:text-white focus:outline-none" aria-label="Mehr">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-5 h-5">
              <circle cx="5" cy="12" r="1.5"/>
              <circle cx="12" cy="12" r="1.5"/>
              <circle cx="19" cy="12" r="1.5"/>
            </svg>
          </button>
          <!-- Close -->
          <button type="button" class="hover:text-white focus:outline-none" aria-label="Schließen">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.6" class="w-4 h-4">
              <path d="M6 6l12 12M18 6L6 18"/>
            </svg>
          </button>
        </div>
      </div>

      <!-- Eingabe -->
      <form id="chat-form" class="mb-4">
        <div class="relative w-full">
          <input id="chat-input" type="text" placeholder="Nachricht an School AI..." class="w-full rounded-md bg-[#121318] text-neutral-100 placeholder-neutral-500 outline-none focus:ring-2 focus:ring-[#2f3b47]  pl-3 pr-16 py-5 text-sm" />
          <!-- Bild-Icon im Feld -->
          <button type="button" aria-label="Bild auswählen" class="absolute right-10 top-1/2 -translate-y-1/2 text-neutral-300 hover:text-white focus:outline-none">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.6" class="w-5 h-5">
              <path d="M4.5 5.5h15a1.5 1.5 0 011.5 1.5v10a1.5 1.5 0 01-1.5 1.5h-15A1.5 1.5 0 013 17V7a1.5 1.5 0 011.5-1.5z"/>
              <path d="M7 14l2.2-2.2a1.5 1.5 0 012.1 0L13.5 14l1.5-1.5a1.5 1.5 0 012.1 0L19.5 15"/>
              <circle cx="8.5" cy="9" r="1.2"/>
            </svg>
          </button>
          <!-- Senden-Icon im Feld -->
          <button type="submit" aria-label="Senden" class="absolute right-3 top-1/2 -translate-y-1/2 text-white focus:outline-none">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-5 h-5">
              <path d="M2.25 12l18-9-4.5 9 4.5 9-18-9z"/>
            </svg>
          </button>
        </div>
      </form>

      <!-- Nachrichtenliste darunter -->
      <div id="chat-messages" class="flex-1 overflow-y-auto overflow-x-hidden space-y-4 pr-1">
        <!-- Noch keine Nachrichten: leerer Startzustand -->
      </div>
    </aside>
  </div>

  <script>
    // Whiteboard Setup mit Farben + Text-Tool
    (function() {
      const canvas = document.getElementById('whiteboard-canvas');
      if (!canvas) return;
      const ctx = canvas.getContext('2d');
      const wrapper = document.getElementById('whiteboard-wrapper');
      const textLayer = document.getElementById('text-layer');

      let drawing = false;
      let lastX = 0, lastY = 0;
      let currentColor = '#ef4444'; // rot als default
      let mode = 'none'; // 'none' | 'draw' | 'text'

      const btnDraw = document.getElementById('tool-draw');
      const btnText = document.getElementById('tool-text');

      function updateToolUI() {
        [btnDraw, btnText].forEach(b => b && b.classList.remove('ring-2','ring-white'));
        if (mode === 'draw' && btnDraw) btnDraw.classList.add('ring-2','ring-white');
        if (mode === 'text' && btnText) btnText.classList.add('ring-2','ring-white');
      }
      function setMode(newMode) {
        mode = (mode === newMode) ? 'none' : newMode;
        updateToolUI();
      }

      function resizeCanvas() {
        const holder = textLayer.parentElement; // relative container
        const rect = holder.getBoundingClientRect();
        const dpr = window.devicePixelRatio || 1;
        canvas.width = Math.floor(rect.width * dpr);
        canvas.height = Math.floor(rect.height * dpr);
        canvas.style.width = rect.width + 'px';
        canvas.style.height = rect.height + 'px';
        ctx.setTransform(dpr, 0, 0, dpr, 0, 0);
        ctx.lineCap = 'round';
        ctx.lineJoin = 'round';
        ctx.lineWidth = 3;
        ctx.strokeStyle = currentColor;
      }

      function startDraw(x, y) { drawing = true; [lastX, lastY] = [x, y]; }
      function draw(x, y) {
        if (!drawing || mode !== 'draw') return;
        ctx.beginPath();
        ctx.moveTo(lastX, lastY);
        ctx.lineTo(x, y);
        ctx.stroke();
        [lastX, lastY] = [x, y];
      }
      function stopDraw() { drawing = false; }

      // Mouse
      canvas.addEventListener('mousedown', e => { if (mode==='draw') startDraw(e.offsetX, e.offsetY); });
      canvas.addEventListener('mousemove', e => draw(e.offsetX, e.offsetY));
      window.addEventListener('mouseup', stopDraw);
      canvas.addEventListener('mouseleave', stopDraw);

      // Text-Modus: Klick fügt dragbare Textbox hinzu
      canvas.addEventListener('click', e => {
        if (mode !== 'text') return;
        const rect = canvas.getBoundingClientRect();
        const x = e.clientX - rect.left;
        const y = e.clientY - rect.top;
        const node = document.createElement('div');
        node.contentEditable = 'true';
        node.textContent = 'Text';
        node.className = 'pointer-events-auto absolute px-2 py-1 rounded bg-transparent text-sm';
        node.style.left = x + 'px';
        node.style.top = y + 'px';
        node.style.color = currentColor;
        node.style.cursor = 'move';
        textLayer.appendChild(node);
        // Drag
        let dragging = false, sx=0, sy=0, ox=0, oy=0;
        node.addEventListener('mousedown', ev => { const rect2 = canvas.getBoundingClientRect(); dragging = true; sx = ev.clientX; sy = ev.clientY; const r = node.getBoundingClientRect(); ox = r.left - rect2.left; oy = r.top - rect2.top; ev.preventDefault(); });
        window.addEventListener('mousemove', ev => { if(!dragging) return; const rect2 = canvas.getBoundingClientRect(); const nx = ox + (ev.clientX - sx); const ny = oy + (ev.clientY - sy); node.style.left = nx + 'px'; node.style.top = ny + 'px'; });
        window.addEventListener('mouseup', () => dragging = false);
        node.focus();
        // Nach Platzierung wieder kein Tool aktiv
        setMode('text'); // toggelt auf 'none'
      });

      // Toolbar
      wrapper.querySelectorAll('[data-color]').forEach(btn => {
        btn.addEventListener('click', () => {
          currentColor = btn.getAttribute('data-color');
          ctx.strokeStyle = currentColor;
          // aktive Markierung
          wrapper.querySelectorAll('[data-color]').forEach(b=>b.classList.remove('ring-2','ring-white'));
          btn.classList.add('ring-2','ring-white');
        });
      });
      btnDraw?.addEventListener('click', ()=> setMode('draw'));
      btnText?.addEventListener('click', ()=> setMode('text'));

      window.addEventListener('resize', resizeCanvas);
      resizeCanvas();
    })();

    // Nur UI-Demo: lokale Anzeige gesendeter Nachrichten + Bot-Reply
    (function(){
      const indicator = document.getElementById('page-indicator');
      const nextBtn = document.getElementById('btn-next-page');
      let current = 1, total = 24;
      function renderPage(){ if(indicator) indicator.textContent = `Seite ${current} von ${total}`; }
      nextBtn?.addEventListener('click', ()=>{ current = current >= total ? 1 : current + 1; renderPage(); });
      renderPage();
    })();

    // Chat-Demo
    const form = document.getElementById('chat-form');
    const input = document.getElementById('chat-input');
    const list = document.getElementById('chat-messages');

    function escapeHtml(t){return t.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;');}
    function formatTime(d){return d.toLocaleTimeString([], {hour:'2-digit', minute:'2-digit'});}    

    function addMessage(role, text){
      const isUser = role === 'user';
      const container = document.createElement('div');
      container.className = `flex gap-3 ${isUser ? 'justify-end' : 'justify-start'} px-1`;
      const time = formatTime(new Date());
      const bubble = `
        <div class=\"max-w-[85%]\">\n          <div class=\"text-xs text-neutral-400 mb-1 ${isUser ? 'text-right' : ''}\">${isUser ? 'Du' : 'School AI'}</div>\n          <div class=\"${isUser ? 'bg-[#08090c]' : 'bg-neutral-800/80'} relative rounded-lg p-3 pr-8 pb-2 text-sm leading-relaxed text-neutral-100 break-words whitespace-pre-wrap\">${escapeHtml(text)}\n            <div class=\"absolute bottom-1 right-2 text-[10px] text-neutral-400\">${time}</div>\n          </div>\n        </div>`;
      container.innerHTML = bubble;
      list.appendChild(container);
      list.scrollTop = list.scrollHeight;
    }

    // Konversationsverlauf für Backend
    const history = [];

    form?.addEventListener('submit', async (e) => {
      e.preventDefault();
      const text = input.value.trim();
      if (!text) return;

      // User Message
      addMessage('user', text);
      history.push({ role: 'user', content: text });
      input.value = '';
      input.focus();

      // Loading-Pla ceholder
      const loading = document.createElement('div');
      loading.className = 'flex gap-3 justify-start px-1';
      loading.innerHTML = `
        <div class=\"max-w-[85%]\">\n          <div class=\"text-xs text-neutral-400 mb-1\">School AI</div>\n          <div class=\"bg-neutral-800/80 relative rounded-lg p-3 pr-8 pb-2 text-sm leading-relaxed text-neutral-100\">…\n            <div class=\"absolute bottom-1 right-2 text-[10px] text-neutral-400\">${formatTime(new Date())}</div>\n          </div>\n        </div>`;
      list.appendChild(loading);
      list.scrollTop = list.scrollHeight;

      try {
        const resp = await fetch('/api/chat', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ messages: history })
        });
        if (!resp.ok) {
          const err = await resp.json().catch(()=>({error:'Serverfehler'}));
          throw new Error(err.error || 'Serverfehler');
        }
        const data = await resp.json();
        const reply = (data.reply || '').toString();
        // Ersetze Loading durch finale Antwort
        loading.remove();
        addMessage('assistant', reply);
        history.push({ role: 'assistant', content: reply });
      } catch (err) {
        loading.remove();
        addMessage('assistant', 'Fehler: ' + (err?.message || 'Unbekannt'));
      }
    });
  </script>
</body>
</html>
